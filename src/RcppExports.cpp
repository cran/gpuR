// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// cpp_detectCPUs
SEXP cpp_detectCPUs(SEXP platform_idx);
RcppExport SEXP gpuR_cpp_detectCPUs(SEXP platform_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx(platform_idxSEXP);
    __result = Rcpp::wrap(cpp_detectCPUs(platform_idx));
    return __result;
END_RCPP
}
// cpp_detectGPUs
SEXP cpp_detectGPUs(SEXP platform_idx);
RcppExport SEXP gpuR_cpp_detectGPUs(SEXP platform_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx(platform_idxSEXP);
    __result = Rcpp::wrap(cpp_detectGPUs(platform_idx));
    return __result;
END_RCPP
}
// detectPlatforms
SEXP detectPlatforms();
RcppExport SEXP gpuR_detectPlatforms() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(detectPlatforms());
    return __result;
END_RCPP
}
// cpp_device_has_double
bool cpp_device_has_double(SEXP platform_idx_, SEXP gpu_idx_);
RcppExport SEXP gpuR_cpp_device_has_double(SEXP platform_idx_SEXP, SEXP gpu_idx_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx_(platform_idx_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type gpu_idx_(gpu_idx_SEXP);
    __result = Rcpp::wrap(cpp_device_has_double(platform_idx_, gpu_idx_));
    return __result;
END_RCPP
}
// GetVecElement
SEXP GetVecElement(SEXP ptrA, const int idx, const int type_flag);
RcppExport SEXP gpuR_GetVecElement(SEXP ptrASEXP, SEXP idxSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(GetVecElement(ptrA, idx, type_flag));
    return __result;
END_RCPP
}
// SetVecElement
void SetVecElement(SEXP ptrA, const int idx, SEXP value, const int type_flag);
RcppExport SEXP gpuR_SetVecElement(SEXP ptrASEXP, SEXP idxSEXP, SEXP valueSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    SetVecElement(ptrA, idx, value, type_flag);
    return R_NilValue;
END_RCPP
}
// SetMatRow
void SetMatRow(SEXP ptrA, const int idx, SEXP value, const int type_flag);
RcppExport SEXP gpuR_SetMatRow(SEXP ptrASEXP, SEXP idxSEXP, SEXP valueSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    SetMatRow(ptrA, idx, value, type_flag);
    return R_NilValue;
END_RCPP
}
// SetMatCol
void SetMatCol(SEXP ptrA, const int idx, SEXP value, const int type_flag);
RcppExport SEXP gpuR_SetMatCol(SEXP ptrASEXP, SEXP idxSEXP, SEXP valueSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    SetMatCol(ptrA, idx, value, type_flag);
    return R_NilValue;
END_RCPP
}
// SetMatElement
void SetMatElement(SEXP ptrA, const int nr, const int nc, SEXP value, const int type_flag);
RcppExport SEXP gpuR_SetMatElement(SEXP ptrASEXP, SEXP nrSEXP, SEXP ncSEXP, SEXP valueSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    SetMatElement(ptrA, nr, nc, value, type_flag);
    return R_NilValue;
END_RCPP
}
// GetMatRow
SEXP GetMatRow(SEXP ptrA, const int idx, const int type_flag);
RcppExport SEXP gpuR_GetMatRow(SEXP ptrASEXP, SEXP idxSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(GetMatRow(ptrA, idx, type_flag));
    return __result;
END_RCPP
}
// GetMatCol
SEXP GetMatCol(SEXP ptrA, const int idx, const int type_flag);
RcppExport SEXP gpuR_GetMatCol(SEXP ptrASEXP, SEXP idxSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(GetMatCol(ptrA, idx, type_flag));
    return __result;
END_RCPP
}
// GetMatElement
SEXP GetMatElement(SEXP ptrA, const int nr, const int nc, const int type_flag);
RcppExport SEXP gpuR_GetMatElement(SEXP ptrASEXP, SEXP nrSEXP, SEXP ncSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(GetMatElement(ptrA, nr, nc, type_flag));
    return __result;
END_RCPP
}
// vectorToSEXP
SEXP vectorToSEXP(SEXP ptrA, const int type_flag);
RcppExport SEXP gpuR_vectorToSEXP(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(vectorToSEXP(ptrA, type_flag));
    return __result;
END_RCPP
}
// vectorToMat
SEXP vectorToMat(SEXP ptrA, const int nr, const int nc, const int type_flag);
RcppExport SEXP gpuR_vectorToMat(SEXP ptrASEXP, SEXP nrSEXP, SEXP ncSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(vectorToMat(ptrA, nr, nc, type_flag));
    return __result;
END_RCPP
}
// matrixToGPUXptr
SEXP matrixToGPUXptr(SEXP ptrA, const int type_flag);
RcppExport SEXP gpuR_matrixToGPUXptr(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(matrixToGPUXptr(ptrA, type_flag));
    return __result;
END_RCPP
}
// VecXptrToVecSEXP
SEXP VecXptrToVecSEXP(SEXP ptrA, const int type_flag);
RcppExport SEXP gpuR_VecXptrToVecSEXP(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(VecXptrToVecSEXP(ptrA, type_flag));
    return __result;
END_RCPP
}
// MatXptrToMatSEXP
SEXP MatXptrToMatSEXP(SEXP ptrA, const int type_flag);
RcppExport SEXP gpuR_MatXptrToMatSEXP(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(MatXptrToMatSEXP(ptrA, type_flag));
    return __result;
END_RCPP
}
// emptyVecXptr
SEXP emptyVecXptr(const int size, const int type_flag);
RcppExport SEXP gpuR_emptyVecXptr(SEXP sizeSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(emptyVecXptr(size, type_flag));
    return __result;
END_RCPP
}
// emptyMatXptr
SEXP emptyMatXptr(const int nr, const int nc, const int type_flag);
RcppExport SEXP gpuR_emptyMatXptr(SEXP nrSEXP, SEXP ncSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(emptyMatXptr(nr, nc, type_flag));
    return __result;
END_RCPP
}
// cpp_gpuInfo
List cpp_gpuInfo(SEXP platform_idx_, SEXP gpu_idx_);
RcppExport SEXP gpuR_cpp_gpuInfo(SEXP platform_idx_SEXP, SEXP gpu_idx_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx_(platform_idx_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type gpu_idx_(gpu_idx_SEXP);
    __result = Rcpp::wrap(cpp_gpuInfo(platform_idx_, gpu_idx_));
    return __result;
END_RCPP
}
// cpp_gpuMatrix_iaxpy
void cpp_gpuMatrix_iaxpy(SEXP alpha_, SEXP ptrA_, SEXP ptrB_, SEXP sourceCode_);
RcppExport SEXP gpuR_cpp_gpuMatrix_iaxpy(SEXP alpha_SEXP, SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP sourceCode_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type sourceCode_(sourceCode_SEXP);
    cpp_gpuMatrix_iaxpy(alpha_, ptrA_, ptrB_, sourceCode_);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_igemm
void cpp_gpuMatrix_igemm(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, SEXP sourceCode_);
RcppExport SEXP gpuR_cpp_gpuMatrix_igemm(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP sourceCode_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type sourceCode_(sourceCode_SEXP);
    cpp_gpuMatrix_igemm(ptrA_, ptrB_, ptrC_, sourceCode_);
    return R_NilValue;
END_RCPP
}
// cpp_gpuVector_iaxpy
void cpp_gpuVector_iaxpy(SEXP alpha_, SEXP ptrA_, SEXP ptrB_, SEXP sourceCode_);
RcppExport SEXP gpuR_cpp_gpuVector_iaxpy(SEXP alpha_SEXP, SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP sourceCode_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type sourceCode_(sourceCode_SEXP);
    cpp_gpuVector_iaxpy(alpha_, ptrA_, ptrB_, sourceCode_);
    return R_NilValue;
END_RCPP
}
// cpp_gpu_two_vec
void cpp_gpu_two_vec(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, SEXP sourceCode_, SEXP kernel_function_);
RcppExport SEXP gpuR_cpp_gpu_two_vec(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP sourceCode_SEXP, SEXP kernel_function_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type sourceCode_(sourceCode_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type kernel_function_(kernel_function_SEXP);
    cpp_gpu_two_vec(ptrA_, ptrB_, ptrC_, sourceCode_, kernel_function_);
    return R_NilValue;
END_RCPP
}
// cpp_platformInfo
List cpp_platformInfo(SEXP platform_idx_);
RcppExport SEXP gpuR_cpp_platformInfo(SEXP platform_idx_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx_(platform_idx_SEXP);
    __result = Rcpp::wrap(cpp_platformInfo(platform_idx_));
    return __result;
END_RCPP
}
// truncIntgpuMat
SEXP truncIntgpuMat(SEXP ptrA_, int nr, int nc);
RcppExport SEXP gpuR_truncIntgpuMat(SEXP ptrA_SEXP, SEXP nrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    __result = Rcpp::wrap(truncIntgpuMat(ptrA_, nr, nc));
    return __result;
END_RCPP
}
// truncFloatgpuMat
SEXP truncFloatgpuMat(SEXP ptrA_, int nr, int nc);
RcppExport SEXP gpuR_truncFloatgpuMat(SEXP ptrA_SEXP, SEXP nrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    __result = Rcpp::wrap(truncFloatgpuMat(ptrA_, nr, nc));
    return __result;
END_RCPP
}
// truncDoublegpuMat
SEXP truncDoublegpuMat(SEXP ptrA_, int nr, int nc);
RcppExport SEXP gpuR_truncDoublegpuMat(SEXP ptrA_SEXP, SEXP nrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    __result = Rcpp::wrap(truncDoublegpuMat(ptrA_, nr, nc));
    return __result;
END_RCPP
}
// vcl_dncol
int vcl_dncol(SEXP ptrA);
RcppExport SEXP gpuR_vcl_dncol(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_dncol(ptrA));
    return __result;
END_RCPP
}
// vcl_fncol
int vcl_fncol(SEXP ptrA);
RcppExport SEXP gpuR_vcl_fncol(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_fncol(ptrA));
    return __result;
END_RCPP
}
// vcl_incol
int vcl_incol(SEXP ptrA);
RcppExport SEXP gpuR_vcl_incol(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_incol(ptrA));
    return __result;
END_RCPP
}
// vcl_dnrow
int vcl_dnrow(SEXP ptrA);
RcppExport SEXP gpuR_vcl_dnrow(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_dnrow(ptrA));
    return __result;
END_RCPP
}
// vcl_fnrow
int vcl_fnrow(SEXP ptrA);
RcppExport SEXP gpuR_vcl_fnrow(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_fnrow(ptrA));
    return __result;
END_RCPP
}
// vcl_inrow
int vcl_inrow(SEXP ptrA);
RcppExport SEXP gpuR_vcl_inrow(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_inrow(ptrA));
    return __result;
END_RCPP
}
// vcl_dgpuVec_size
int vcl_dgpuVec_size(SEXP ptrA);
RcppExport SEXP gpuR_vcl_dgpuVec_size(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_dgpuVec_size(ptrA));
    return __result;
END_RCPP
}
// vcl_fgpuVec_size
int vcl_fgpuVec_size(SEXP ptrA);
RcppExport SEXP gpuR_vcl_fgpuVec_size(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_fgpuVec_size(ptrA));
    return __result;
END_RCPP
}
// vcl_igpuVec_size
int vcl_igpuVec_size(SEXP ptrA);
RcppExport SEXP gpuR_vcl_igpuVec_size(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_igpuVec_size(ptrA));
    return __result;
END_RCPP
}
// cpp_dncol
int cpp_dncol(SEXP ptrA);
RcppExport SEXP gpuR_cpp_dncol(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_dncol(ptrA));
    return __result;
END_RCPP
}
// cpp_fncol
int cpp_fncol(SEXP ptrA);
RcppExport SEXP gpuR_cpp_fncol(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_fncol(ptrA));
    return __result;
END_RCPP
}
// cpp_incol
int cpp_incol(SEXP ptrA);
RcppExport SEXP gpuR_cpp_incol(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_incol(ptrA));
    return __result;
END_RCPP
}
// cpp_dnrow
int cpp_dnrow(SEXP ptrA);
RcppExport SEXP gpuR_cpp_dnrow(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_dnrow(ptrA));
    return __result;
END_RCPP
}
// cpp_fnrow
int cpp_fnrow(SEXP ptrA);
RcppExport SEXP gpuR_cpp_fnrow(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_fnrow(ptrA));
    return __result;
END_RCPP
}
// cpp_inrow
int cpp_inrow(SEXP ptrA);
RcppExport SEXP gpuR_cpp_inrow(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_inrow(ptrA));
    return __result;
END_RCPP
}
// cpp_dgpuVec_size
int cpp_dgpuVec_size(SEXP ptrA);
RcppExport SEXP gpuR_cpp_dgpuVec_size(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_dgpuVec_size(ptrA));
    return __result;
END_RCPP
}
// cpp_fgpuVec_size
int cpp_fgpuVec_size(SEXP ptrA);
RcppExport SEXP gpuR_cpp_fgpuVec_size(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_fgpuVec_size(ptrA));
    return __result;
END_RCPP
}
// cpp_igpuVec_size
int cpp_igpuVec_size(SEXP ptrA);
RcppExport SEXP gpuR_cpp_igpuVec_size(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_igpuVec_size(ptrA));
    return __result;
END_RCPP
}
// matrixToVCL
SEXP matrixToVCL(SEXP ptrA, const int type_flag);
RcppExport SEXP gpuR_matrixToVCL(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(matrixToVCL(ptrA, type_flag));
    return __result;
END_RCPP
}
// VCLtoMatSEXP
SEXP VCLtoMatSEXP(SEXP ptrA, const int type_flag);
RcppExport SEXP gpuR_VCLtoMatSEXP(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(VCLtoMatSEXP(ptrA, type_flag));
    return __result;
END_RCPP
}
// emptyVCL
SEXP emptyVCL(const int nr, const int nc, const int type_flag);
RcppExport SEXP gpuR_emptyVCL(SEXP nrSEXP, SEXP ncSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(emptyVCL(nr, nc, type_flag));
    return __result;
END_RCPP
}
// vclSetCol
void vclSetCol(SEXP ptrA, const int nc, SEXP newdata, const int type_flag);
RcppExport SEXP gpuR_vclSetCol(SEXP ptrASEXP, SEXP ncSEXP, SEXP newdataSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< SEXP >::type newdata(newdataSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    vclSetCol(ptrA, nc, newdata, type_flag);
    return R_NilValue;
END_RCPP
}
// vclSetRow
void vclSetRow(SEXP ptrA, const int nr, SEXP newdata, const int type_flag);
RcppExport SEXP gpuR_vclSetRow(SEXP ptrASEXP, SEXP nrSEXP, SEXP newdataSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type newdata(newdataSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    vclSetRow(ptrA, nr, newdata, type_flag);
    return R_NilValue;
END_RCPP
}
// vclSetElement
void vclSetElement(SEXP ptrA, const int nr, const int nc, SEXP newdata, const int type_flag);
RcppExport SEXP gpuR_vclSetElement(SEXP ptrASEXP, SEXP nrSEXP, SEXP ncSEXP, SEXP newdataSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< SEXP >::type newdata(newdataSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    vclSetElement(ptrA, nr, nc, newdata, type_flag);
    return R_NilValue;
END_RCPP
}
// vclGetCol
SEXP vclGetCol(SEXP ptrA, const int nc, const int type_flag);
RcppExport SEXP gpuR_vclGetCol(SEXP ptrASEXP, SEXP ncSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(vclGetCol(ptrA, nc, type_flag));
    return __result;
END_RCPP
}
// vclGetRow
SEXP vclGetRow(SEXP ptrA, const int nr, const int type_flag);
RcppExport SEXP gpuR_vclGetRow(SEXP ptrASEXP, SEXP nrSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(vclGetRow(ptrA, nr, type_flag));
    return __result;
END_RCPP
}
// vclGetElement
SEXP vclGetElement(SEXP ptrA, const int nr, const int nc, const int type_flag);
RcppExport SEXP gpuR_vclGetElement(SEXP ptrASEXP, SEXP nrSEXP, SEXP ncSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(vclGetElement(ptrA, nr, nc, type_flag));
    return __result;
END_RCPP
}
// vclVecGetElement
SEXP vclVecGetElement(SEXP ptrA, const int idx, const int type_flag);
RcppExport SEXP gpuR_vclVecGetElement(SEXP ptrASEXP, SEXP idxSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(vclVecGetElement(ptrA, idx, type_flag));
    return __result;
END_RCPP
}
// vclVecSetElement
void vclVecSetElement(SEXP ptrA, const int idx, SEXP newdata, const int type_flag);
RcppExport SEXP gpuR_vclVecSetElement(SEXP ptrASEXP, SEXP idxSEXP, SEXP newdataSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type newdata(newdataSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    vclVecSetElement(ptrA, idx, newdata, type_flag);
    return R_NilValue;
END_RCPP
}
// vectorToVCL
SEXP vectorToVCL(SEXP ptrA, const int type_flag, const int device_flag);
RcppExport SEXP gpuR_vectorToVCL(SEXP ptrASEXP, SEXP type_flagSEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    __result = Rcpp::wrap(vectorToVCL(ptrA, type_flag, device_flag));
    return __result;
END_RCPP
}
// vectorToMatVCL
SEXP vectorToMatVCL(SEXP ptrA, const int nr, const int nc, const int type_flag, const int device_flag);
RcppExport SEXP gpuR_vectorToMatVCL(SEXP ptrASEXP, SEXP nrSEXP, SEXP ncSEXP, SEXP type_flagSEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    __result = Rcpp::wrap(vectorToMatVCL(ptrA, nr, nc, type_flag, device_flag));
    return __result;
END_RCPP
}
// VCLtoVecSEXP
SEXP VCLtoVecSEXP(SEXP ptrA, const int type_flag);
RcppExport SEXP gpuR_VCLtoVecSEXP(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(VCLtoVecSEXP(ptrA, type_flag));
    return __result;
END_RCPP
}
// emptyVecVCL
SEXP emptyVecVCL(int length, const int type_flag, const int device_flag);
RcppExport SEXP gpuR_emptyVecVCL(SEXP lengthSEXP, SEXP type_flagSEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    __result = Rcpp::wrap(emptyVecVCL(length, type_flag, device_flag));
    return __result;
END_RCPP
}
// cpp_gpuMatrix_elem_prod
void cpp_gpuMatrix_elem_prod(SEXP ptrA, SEXP ptrB, SEXP ptrC, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_elem_prod(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP ptrCSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC(ptrCSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_elem_prod(ptrA, ptrB, ptrC, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_elem_div
void cpp_gpuMatrix_elem_div(SEXP ptrA, SEXP ptrB, SEXP ptrC, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_elem_div(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP ptrCSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC(ptrCSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_elem_div(ptrA, ptrB, ptrC, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_elem_sin
void cpp_gpuMatrix_elem_sin(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_elem_sin(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_elem_sin(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_elem_asin
void cpp_gpuMatrix_elem_asin(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_elem_asin(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_elem_asin(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_elem_sinh
void cpp_gpuMatrix_elem_sinh(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_elem_sinh(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_elem_sinh(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_elem_cos
void cpp_gpuMatrix_elem_cos(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_elem_cos(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_elem_cos(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_elem_acos
void cpp_gpuMatrix_elem_acos(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_elem_acos(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_elem_acos(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_elem_cosh
void cpp_gpuMatrix_elem_cosh(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_elem_cosh(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_elem_cosh(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_elem_tan
void cpp_gpuMatrix_elem_tan(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_elem_tan(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_elem_tan(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_elem_atan
void cpp_gpuMatrix_elem_atan(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_elem_atan(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_elem_atan(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_elem_tanh
void cpp_gpuMatrix_elem_tanh(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_elem_tanh(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_elem_tanh(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_elem_log
void cpp_gpuMatrix_elem_log(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_elem_log(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_elem_log(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_elem_log_base
void cpp_gpuMatrix_elem_log_base(SEXP ptrA, SEXP ptrB, SEXP base, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_elem_log_base(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP baseSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type base(baseSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_elem_log_base(ptrA, ptrB, base, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_elem_log10
void cpp_gpuMatrix_elem_log10(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_elem_log10(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_elem_log10(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_elem_exp
void cpp_gpuMatrix_elem_exp(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_elem_exp(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_elem_exp(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_axpy
void cpp_gpuMatrix_axpy(SEXP alpha, SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_axpy(SEXP alphaSEXP, SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_axpy(alpha, ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_axpy
void cpp_vclMatrix_axpy(SEXP alpha, SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_axpy(SEXP alphaSEXP, SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_axpy(alpha, ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_elem_prod
void cpp_vclMatrix_elem_prod(SEXP ptrA, SEXP ptrB, SEXP ptrC, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_elem_prod(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP ptrCSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC(ptrCSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_elem_prod(ptrA, ptrB, ptrC, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_elem_div
void cpp_vclMatrix_elem_div(SEXP ptrA, SEXP ptrB, SEXP ptrC, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_elem_div(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP ptrCSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC(ptrCSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_elem_div(ptrA, ptrB, ptrC, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_elem_sin
void cpp_vclMatrix_elem_sin(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_elem_sin(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_elem_sin(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_elem_asin
void cpp_vclMatrix_elem_asin(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_elem_asin(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_elem_asin(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_elem_sinh
void cpp_vclMatrix_elem_sinh(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_elem_sinh(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_elem_sinh(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_elem_cos
void cpp_vclMatrix_elem_cos(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_elem_cos(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_elem_cos(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_elem_acos
void cpp_vclMatrix_elem_acos(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_elem_acos(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_elem_acos(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_elem_cosh
void cpp_vclMatrix_elem_cosh(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_elem_cosh(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_elem_cosh(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_elem_tan
void cpp_vclMatrix_elem_tan(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_elem_tan(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_elem_tan(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_elem_atan
void cpp_vclMatrix_elem_atan(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_elem_atan(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_elem_atan(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_elem_tanh
void cpp_vclMatrix_elem_tanh(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_elem_tanh(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_elem_tanh(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_elem_log
void cpp_vclMatrix_elem_log(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_elem_log(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_elem_log(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_elem_log10
void cpp_vclMatrix_elem_log10(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_elem_log10(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_elem_log10(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_elem_log_base
void cpp_vclMatrix_elem_log_base(SEXP ptrA, SEXP ptrB, SEXP base, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_elem_log_base(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP baseSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type base(baseSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_elem_log_base(ptrA, ptrB, base, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_elem_exp
void cpp_vclMatrix_elem_exp(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_elem_exp(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_elem_exp(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuVector_axpy
void cpp_gpuVector_axpy(SEXP alpha, SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuVector_axpy(SEXP alphaSEXP, SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuVector_axpy(alpha, ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuVector_inner_prod
SEXP cpp_gpuVector_inner_prod(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuVector_inner_prod(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(cpp_gpuVector_inner_prod(ptrA, ptrB, device_flag, type_flag));
    return __result;
END_RCPP
}
// cpp_gpuVector_outer_prod
void cpp_gpuVector_outer_prod(SEXP ptrA, SEXP ptrB, SEXP ptrC, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuVector_outer_prod(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP ptrCSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC(ptrCSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuVector_outer_prod(ptrA, ptrB, ptrC, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuVector_elem_prod
void cpp_gpuVector_elem_prod(SEXP ptrA, SEXP ptrB, SEXP ptrC, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuVector_elem_prod(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP ptrCSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC(ptrCSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuVector_elem_prod(ptrA, ptrB, ptrC, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuVector_elem_div
void cpp_gpuVector_elem_div(SEXP ptrA, SEXP ptrB, SEXP ptrC, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuVector_elem_div(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP ptrCSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC(ptrCSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuVector_elem_div(ptrA, ptrB, ptrC, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuVector_elem_sin
void cpp_gpuVector_elem_sin(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuVector_elem_sin(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuVector_elem_sin(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuVector_elem_asin
void cpp_gpuVector_elem_asin(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuVector_elem_asin(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuVector_elem_asin(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuVector_elem_sinh
void cpp_gpuVector_elem_sinh(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuVector_elem_sinh(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuVector_elem_sinh(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuVector_elem_cos
void cpp_gpuVector_elem_cos(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuVector_elem_cos(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuVector_elem_cos(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuVector_elem_acos
void cpp_gpuVector_elem_acos(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuVector_elem_acos(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuVector_elem_acos(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuVector_elem_cosh
void cpp_gpuVector_elem_cosh(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuVector_elem_cosh(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuVector_elem_cosh(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuVector_elem_tan
void cpp_gpuVector_elem_tan(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuVector_elem_tan(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuVector_elem_tan(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuVector_elem_atan
void cpp_gpuVector_elem_atan(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuVector_elem_atan(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuVector_elem_atan(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuVector_elem_tanh
void cpp_gpuVector_elem_tanh(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuVector_elem_tanh(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuVector_elem_tanh(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclVector_axpy
void cpp_vclVector_axpy(SEXP alpha, SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclVector_axpy(SEXP alphaSEXP, SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclVector_axpy(alpha, ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclVector_inner_prod
SEXP cpp_vclVector_inner_prod(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclVector_inner_prod(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(cpp_vclVector_inner_prod(ptrA, ptrB, device_flag, type_flag));
    return __result;
END_RCPP
}
// cpp_vclVector_outer_prod
void cpp_vclVector_outer_prod(SEXP ptrA, SEXP ptrB, SEXP ptrC, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclVector_outer_prod(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP ptrCSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC(ptrCSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclVector_outer_prod(ptrA, ptrB, ptrC, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclVector_elem_prod
void cpp_vclVector_elem_prod(SEXP ptrA, SEXP ptrB, SEXP ptrC, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclVector_elem_prod(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP ptrCSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC(ptrCSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclVector_elem_prod(ptrA, ptrB, ptrC, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclVector_elem_div
void cpp_vclVector_elem_div(SEXP ptrA, SEXP ptrB, SEXP ptrC, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclVector_elem_div(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP ptrCSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC(ptrCSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclVector_elem_div(ptrA, ptrB, ptrC, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclVector_elem_sin
void cpp_vclVector_elem_sin(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclVector_elem_sin(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclVector_elem_sin(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclVector_elem_asin
void cpp_vclVector_elem_asin(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclVector_elem_asin(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclVector_elem_asin(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclVector_elem_sinh
void cpp_vclVector_elem_sinh(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclVector_elem_sinh(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclVector_elem_sinh(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclVector_elem_cos
void cpp_vclVector_elem_cos(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclVector_elem_cos(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclVector_elem_cos(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclVector_elem_acos
void cpp_vclVector_elem_acos(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclVector_elem_acos(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclVector_elem_acos(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclVector_elem_cosh
void cpp_vclVector_elem_cosh(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclVector_elem_cosh(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclVector_elem_cosh(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclVector_elem_tan
void cpp_vclVector_elem_tan(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclVector_elem_tan(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclVector_elem_tan(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclVector_elem_atan
void cpp_vclVector_elem_atan(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclVector_elem_atan(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclVector_elem_atan(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclVector_elem_tanh
void cpp_vclVector_elem_tanh(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclVector_elem_tanh(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclVector_elem_tanh(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclVector_elem_log
void cpp_vclVector_elem_log(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclVector_elem_log(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclVector_elem_log(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclVector_elem_log10
void cpp_vclVector_elem_log10(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclVector_elem_log10(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclVector_elem_log10(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclVector_elem_log_base
void cpp_vclVector_elem_log_base(SEXP ptrA, SEXP ptrB, SEXP R_base, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclVector_elem_log_base(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP R_baseSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_base(R_baseSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclVector_elem_log_base(ptrA, ptrB, R_base, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclVector_elem_exp
void cpp_vclVector_elem_exp(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclVector_elem_exp(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclVector_elem_exp(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_gemm
void cpp_gpuMatrix_gemm(SEXP ptrA, SEXP ptrB, SEXP ptrC, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_gemm(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP ptrCSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC(ptrCSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_gemm(ptrA, ptrB, ptrC, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_crossprod
void cpp_gpuMatrix_crossprod(SEXP ptrA, SEXP ptrB, SEXP ptrC, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_crossprod(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP ptrCSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC(ptrCSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_crossprod(ptrA, ptrB, ptrC, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_tcrossprod
void cpp_gpuMatrix_tcrossprod(SEXP ptrA, SEXP ptrB, SEXP ptrC, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_tcrossprod(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP ptrCSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC(ptrCSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_tcrossprod(ptrA, ptrB, ptrC, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_gemm
void cpp_vclMatrix_gemm(SEXP ptrA, SEXP ptrB, SEXP ptrC, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_gemm(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP ptrCSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC(ptrCSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_gemm(ptrA, ptrB, ptrC, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_crossprod
void cpp_vclMatrix_crossprod(SEXP ptrA, SEXP ptrB, SEXP ptrC, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_crossprod(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP ptrCSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC(ptrCSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_crossprod(ptrA, ptrB, ptrC, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_tcrossprod
void cpp_vclMatrix_tcrossprod(SEXP ptrA, SEXP ptrB, SEXP ptrC, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_tcrossprod(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP ptrCSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC(ptrCSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_tcrossprod(ptrA, ptrB, ptrC, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpu_eigen
void cpp_gpu_eigen(SEXP Am, SEXP Qm, SEXP eigenvalues, const bool symmetric, const int type_flag, const int device_flag);
RcppExport SEXP gpuR_cpp_gpu_eigen(SEXP AmSEXP, SEXP QmSEXP, SEXP eigenvaluesSEXP, SEXP symmetricSEXP, SEXP type_flagSEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Am(AmSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Qm(QmSEXP);
    Rcpp::traits::input_parameter< SEXP >::type eigenvalues(eigenvaluesSEXP);
    Rcpp::traits::input_parameter< const bool >::type symmetric(symmetricSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    cpp_gpu_eigen(Am, Qm, eigenvalues, symmetric, type_flag, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vcl_eigen
void cpp_vcl_eigen(SEXP Am, SEXP Qm, SEXP eigenvalues, const bool symmetric, const int type_flag, const int device_flag);
RcppExport SEXP gpuR_cpp_vcl_eigen(SEXP AmSEXP, SEXP QmSEXP, SEXP eigenvaluesSEXP, SEXP symmetricSEXP, SEXP type_flagSEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Am(AmSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Qm(QmSEXP);
    Rcpp::traits::input_parameter< SEXP >::type eigenvalues(eigenvaluesSEXP);
    Rcpp::traits::input_parameter< const bool >::type symmetric(symmetricSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    cpp_vcl_eigen(Am, Qm, eigenvalues, symmetric, type_flag, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_pmcc
void cpp_gpuMatrix_pmcc(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_pmcc(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_pmcc(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_pmcc
void cpp_vclMatrix_pmcc(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_pmcc(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_pmcc(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_eucl
void cpp_vclMatrix_eucl(SEXP ptrA, SEXP ptrD, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_eucl(SEXP ptrASEXP, SEXP ptrDSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrD(ptrDSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_eucl(ptrA, ptrD, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_eucl
void cpp_gpuMatrix_eucl(SEXP ptrA, SEXP ptrD, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_eucl(SEXP ptrASEXP, SEXP ptrDSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrD(ptrDSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_eucl(ptrA, ptrD, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_colmean
void cpp_gpuMatrix_colmean(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_colmean(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_colmean(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_colsum
void cpp_gpuMatrix_colsum(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_colsum(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_colsum(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_rowmean
void cpp_gpuMatrix_rowmean(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_rowmean(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_rowmean(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_rowsum
void cpp_gpuMatrix_rowsum(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_gpuMatrix_rowsum(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_gpuMatrix_rowsum(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_colmean
void cpp_vclMatrix_colmean(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_colmean(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_colmean(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_colsum
void cpp_vclMatrix_colsum(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_colsum(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_colsum(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_rowmean
void cpp_vclMatrix_rowmean(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_rowmean(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_rowmean(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_rowsum
void cpp_vclMatrix_rowsum(SEXP ptrA, SEXP ptrB, const int device_flag, const int type_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_rowsum(SEXP ptrASEXP, SEXP ptrBSEXP, SEXP device_flagSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB(ptrBSEXP);
    Rcpp::traits::input_parameter< const int >::type device_flag(device_flagSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cpp_vclMatrix_rowsum(ptrA, ptrB, device_flag, type_flag);
    return R_NilValue;
END_RCPP
}
