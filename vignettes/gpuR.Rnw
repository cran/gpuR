% \VignetteIndexEntry{ A Short Introduction to the gpuR Package}
% \VignettePackage{gpuR}
%\VignetteEngine{knitr::knitr}

% To compile this document
% library('knitr'); rm(list=ls()); knit('gpuR.Rnw')

\documentclass[12pt]{article}
\usepackage[sc]{mathpazo}
\usepackage[T1]{fontenc}
\usepackage{geometry}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{url}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{
 pdfstartview={XYZ null null 1}}

\newcommand{\pkg}[1]{{\fontseries{b}\selectfont #1}}
\renewcommand{\pkg}[1]{{\textsf{#1}}}

\newcommand{\Rpackage}[1]{\textsl{#1}}
\newcommand\CRANpkg[1]{%
  {\href{http://cran.fhcrc.org/web/packages/#1/index.html}%
    {\Rpackage{#1}}}}
\newcommand\Githubpkg[1]{\GithubSplit#1\relax}
\def\GithubSplit#1/#2\relax{{\href{https://github.com/#1/#2}%
    {\Rpackage{#2}}}}

\newcommand{\Rcode}[1]{\texttt{#1}}
\newcommand{\Rfunction}[1]{\Rcode{#1}}
\newcommand{\Robject}[1]{\Rcode{#1}}
\newcommand{\Rclass}[1]{\textit{#1}}


\begin{document}

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
opts_chunk$set(
concordance=TRUE
)
@

\title{A Short Introduction to the \Rpackage{gpuR} Package}
\author{Dr. Charles Determan Jr. PhD\footnote{cdetermanjr@gmail.com}}
\newpage

\maketitle
\section{Introduction}
GPUs (Graphic Processing Units) were originally developed to
perform graphic rendering and commonly referred to in the comuting gaming world.  
These devices are also able to be applied to numerical operations in parallel.
Although there are a few different vendors, the two primary competitors are
AMD and NVIDIA.

NVIDIA GPUs depend upon the proprietary CUDA framework whereas AMD
GPUs utilize the open source OpenCL framework.  The upside of OpenCL is that 
'kernels' are able to used on any GPU whereas CUDA kernels can only be used
on NVIDIA GPUs.  It is worth noting, however, that CUDA tends to edge out
OpenCL performance likely a result of the highly specific framework to the
NVIDIA GPUs.

That said, programming either framework is often difficult for programmers
unaccustomed to working with such a low-level interface.  Creating bindings
for high-level programming languages (such as R) make using GPUs much more
accessible to a broader audience.

Several R packages have been developed including \CRANpkg{gputools}, 
\CRANpkg{cudaBayesreg}, \CRANpkg{HiPLARM}, \CRANpkg{HiPLARb}, and 
\CRANpkg{gmatrix}. However, all of the packages depend upon a CUDA backend and 
therefore restrict the using to only using NVIDIA GPUs.  The novelty of this 
package is the use of the ViennaCL library (http://viennacl.sourceforge.net/) 
which has been coveniently been repackaged in the \Githubpkg{cdeterman/RViennaCL} package 
to be used in other R packages.  This allows the user to leverage the 
auto-tuned OpenCL kernels of the ViennaCL library on any GPU.  It also allows 
for a CUDA backend for those who in fact have a NVIDIA GPU for improved 
performance, which will be provided in a companion \Githubpkg{cdeterman/gpuRcuda} package.

Of the aforementioned packages, most contain a very limited set of 
functions available to the R user within the packages.  The most extensive
being the \Rpackage{gmatrix} package which contains most linear algebra operations.
All of the packages (with the exception of \Rpackage{gmatrix}) don't store the data
on the GPU.  As such, there is the overhead of transferring data back and forth
between the device and host.  Similar to \Rpackage{gmatrix}, this package utilizes
S4 classes to store an external pointer to the data on the GPU which mirror the
base \Rcode{matrix} and \Rcode{vector} classes.  However, given the interactive
nature of R programming and the limited RAM available on GPU's this package 
provides intermediate classes that remove the object from GPU RAM to allow
objects to be stored on the CPU but still utilize the GPU as needed.

\maketitle
\section{Install}
Install \Rpackage{gpuR} using  
<<install, eval = FALSE>>=
# Stable version
install.packages("gpuR")

# Dev version
devtools::install_github("cdeterman/gpuR")
@

\newpage
\maketitle
\section{Basic Use with \Rclass{gpuMatrix}}
\pkg{gpuR} has most basic linear algebra operations.  The user simply needs
to create a \Rclass{gpuMatrix} object and the GPU methods will be used.
Here is a minimal example demonstrating typical matrix multiplication.

<<matMult, eval=FALSE>>=
library("gpuR")

# verify you have valid GPUs
detectGPUs()

# create gpuMatrix and multiply
set.seed(123)
gpuA <- gpuMatrix(rnorm(16), nrow=4, ncol=4)
gpuB <- gpuA %*% gpuA
@

Most linear algebra methods have been created to be executed for the 
\Rclass{gpuMatrix} and \Rclass{gpuVector} objects.  These methods include basic 
Aithmetic functions \Rcode{\%*\%}, \Rcode{+}, \Rcode{-}, \Rcode{*}, 
\Rcode{/}, \Rcode{crossprod}, \Rcode{tcrossprod}, \Rcode{colMeans},
\Rcode{colSums}, \Rcode{rowMean}, and \Rcode{rowSums}.  Math functions include 
\Rcode{sin}, \Rcode{asin}, \Rcode{sinh}, \Rcode{cos}, \Rcode{acos},
\Rcode{cosh}, \Rcode{tan}, \Rcode{atan}, \Rcode{tanh}, \Rcode{exp}, 
\Rcode{log}, \Rcode{log10}.  Additional operations include some linear algebra 
routines such as \Rcode{cov} (Pearson Covariance) and \Rcode{eigen}. With many 
more in development.

The objects may also be created specifying data type including int, float, and 
double.  Float type was included to provide a smaller memory footprint and also 
increased throughput if the increased accuracy of double is not required.

Both the \Rclass{gpuMatrix} and \Rclass{vclMatrix} objects return a pointer
to the data.  Given that working with GPU's implies that you are working with
larger datasets, this prevents R from making unneccessary copies.  However,
this does require the user to exercise caution as any change made to a 'copy' 
(e.g. \Rcode{gpuB <- gpuA}) will result in changes to the original object and
all others pointing to it as well.

\maketitle
\section{\Rclass{vclMatrix} Class}
The \Rclass{vclMatrix} class was created to allow the user to put data directly
on the GPU once and not need to continually push data back and forth between
the host and device.  Therefore, if multiple processes are to be applied to
a given matrix, there will be significant savings by using \Rclass{vclMatrix}
objects.  It is important to remember though, different GPU's have different
amounts of RAM.  The interactive nature of R often has many objects existing
simultaenously where you may exceed your GPU's RAM.  As such, the 
\Rclass{gpuMatrix} class is provided.


\end{document}
